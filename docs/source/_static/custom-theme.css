nav.bd-links li>a:active, .logo__title:hover, nav.bd-links li>a:hover {
    text-decoration: none;
  }
  html[data-theme=light]  {
    --pst-color-primary: #4d8eef;
      --pst-color-primary-highlight: #2d0ef1;
      --sd-color-primary: var(--pst-color-primary);
      --sd-color-primary-text: var(--pst-color-primary-text);
      --sd-color-primary-highlight: var(--pst-color-primary-highlight);
      --sd-color-primary-bg: #547fca;
      --sd-color-primary-bg-text: #14181e;
  
    --pst-color-secondary: #4d8eef;
     --pst-color-secondary-highlight: #2d0ef1;
     --sd-color-secondary: var(--pst-color-secondary);
     --sd-color-secondary-text: var(--pst-color-secondary-text);
    --sd-color-secondary-highlight: var(--pst-color-secondary-highlight);
      --sd-color-secondary-bg: #547fca;
      --pst-color-primary-bg: #84baf4;
      --pst-color-secondary-bg: #547fca;
      --pst-color-accent: #4d8eef;
      --pst-color-accent-bg: #92abd0;
  }
  .bd-sidebar-primary {
  /* 使元素可滚动 */
  overflow-y: scroll; /* 垂直滚动条 */
  overflow-x: hidden; /* 隐藏水平滚动条，如果不需要的话 */
  
  /* 隐藏滚动条但保持滚动功能 */
  scrollbar-width: none; /* Firefox */
  -ms-overflow-style: none;  /* Internet Explorer 和 Edge */
  }
  
  .bd-sidebar-primary::-webkit-scrollbar {
  display: none; /* 隐藏滚动条 */
  }
  .bd-sidebar-primary label.toctree-toggle {
  height: 20px;
  width: 20px;
  opacity: 0.8;
  }
  .navbar-brand:hover:hover, .navbar-brand:visited:hover:hover {
  text-decoration: none !important;
  }
  .bd-sidebar-primary label.toctree-toggle {
  height: 20px;
  width: 20px;
  }
  cite {
    font-style: normal;
  }
  body {
    counter-reset: h2counter toc-h2counter toctree-l2counter;
}

h2 {
    counter-reset: h3counter;
}

h3 {
    counter-reset: h4counter;
}

h4 {
    counter-reset: h5counter;
}

h5 {
    counter-reset: h6counter;
}

h2::before {
    counter-increment: h2counter;
    content: counter(h2counter) ". ";
}

h3::before {
    counter-increment: h3counter;
    content: counter(h2counter) "." counter(h3counter) " ";
}

h4::before {
    counter-increment: h4counter;
    content: counter(h2counter) "." counter(h3counter) "." counter(h4counter) " ";
}

h5::before {
    counter-increment: h5counter;
    content: counter(h2counter) "." counter(h3counter) "." counter(h4counter) "." counter(h5counter) " ";
}

h6::before {
    counter-increment: h6counter;
    content: counter(h2counter) "." counter(h3counter) "." counter(h4counter) "." counter(h5counter) "." counter(h6counter) " ";
}

/* TOC heading counters */
.toc-h2 {
    counter-reset: toc-h3counter;
}

.toc-h3 {
    counter-reset: toc-h4counter;
}

.toc-h4 {
    counter-reset: toc-h5counter;
}

.toc-h5 {
    counter-reset: toc-h6counter;
}

.toc-h2 > .nav-link::before {
    counter-increment: toc-h2counter;
    content: counter(toc-h2counter) ". ";
}

.toc-h3 > .nav-link::before {
    counter-increment: toc-h3counter;
    content: counter(toc-h2counter) "." counter(toc-h3counter) " ";
}

.toc-h4 > .nav-link::before {
    counter-increment: toc-h4counter;
    content: counter(toc-h2counter) "." counter(toc-h3counter) "." counter(toc-h4counter) " ";
}

.toc-h5 > .nav-link::before {
    counter-increment: toc-h5counter;
    content: counter(toc-h2counter) "." counter(toc-h3counter) "." counter(toc-h4counter) "." counter(toc-h5counter) " ";
}

.toc-h6 > .nav-link::before {
    counter-increment: toc-h6counter;
    content: counter(toc-h2counter) "." counter(toc-h3counter) "." counter(toc-h4counter) "." counter(toc-h5counter) "." counter(toc-h6counter) " ";
}

/* Toctree counters */
.toctree-l2 {
    counter-reset: toctree-l3counter;
}

.toctree-l3 {
    counter-reset: toctree-l4counter;
}

.toctree-l4 {
    counter-reset: toctree-l5counter;
}

.toctree-l2 > a::before {
    counter-increment: toctree-l2counter;
    content: counter(toctree-l2counter) ". ";
}

.toctree-l3 > a::before {
    counter-increment: toctree-l3counter;
    content: counter(toctree-l2counter) "." counter(toctree-l3counter) " ";
}

.toctree-l4 > a::before {
    counter-increment: toctree-l4counter;
    content: counter(toctree-l2counter) "." counter(toctree-l3counter) "." counter(toctree-l4counter) " ";
}

.toctree-l5 > a::before {
    counter-increment: toctree-l5counter;
    content: counter(toctree-l2counter) "." counter(toctree-l3counter) "." counter(toctree-l4counter) "." counter(toctree-l5counter) " ";
}